[
  {
    "id": "find-peak-element",
    "problemTitle": "Find Peak Element",
    "problemDescription": "A peak element is an element that is strictly greater than its neighbors. Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that nums[-1] = nums[n] = -∞. You must write an algorithm that runs in O(log n) time.",
    "hint": "Start with the middle element",
    "solution": "Use Binary Search to solve this problem.<br>        Consider the array as an alternating ascending and descending sequences.<br>        Start with the middle element.<br>        If this is a peak, i.e., it is greater than the elements immediately to its right and to its left, return it.<br>        Otherwise, if this element is less than the immediately next element, it means this element is part of an ascending slope. So, restrict the search on the part of the sub-array to the right of this element, i.e., make lo = mid + 1.<br>        Alternatively, if the middle element is less than its immediately preceding element, restrict the search to the sub-array to the left of this element, i.e., hi = mid - 1<br>        Continue doing this, i.e., start with the middle element of the sub-array and repeat the steps above.<br>        If we cannot find a peak element and reach the end of the iteration, where the element at lo === the element at hi, this element will be considered as a peak element. When hi === lo, we have reached the end of the array. Edges, by definition, are peaks, if their adjacent element is smaller than them."
  },
  {"id": "boats-to-save-people",
    "problemTitle": "Boats to Save People",
    "problemDescription": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.<br>        Return the minimum number of boats to carry every given person.<br>        ",
    "hint": "Start with sorting the array",
    "solution": "Approach: the heaviest person should share a boat with the lightest person, if possible. <br>        First, sort the array.<br>        Use two pointers, hi (for the last index) and lo (for the first index).Iterate through the array till hi !== lo<br>        For each pair of hi and lo, see if the weights of the people at hith index and at ‘lo’th index exceed the maximum limit of the boat. <br>        If yes, the person at the ‘hi’th index will have to go alone in the boat. So, add one to the total number of boats, and  decrement the value of hi<br>        If not, the person at ‘hi’th index and the person at ‘lo’th index can share the boat. So, add one to the total number of boats, and increment the value of lo and decrement the value of hi"
  },
  {
    "id": "search-a-2d-matrix",
    "problemTitle": "Search a 2D Matrix",
    "problemDescription": "Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:  <ul> <li>Integers in each row are sorted from left to right.</li>        <li>The first integer of each row is greater than the last integer of the previous row</li></ul>",
    "hint": "Use Binary Search; See the 2D array as one long array",
    "solution": "As each row is sorted in an ascending order and the last element of a given row is less than the first element of the next row, we can see the 2D array as one single dimensional array.<br>        Given this understanding, we can do a simple binary search. <br>        Start with the middle row. If the first element of this row is the target, return it.<br>        If the target is greater than the first element of this row, it would mean that the target is in this row or the succeeding rows. So, we can ignore the previous rows.<br>        If the target is less than the first element of the middle row, we need to shrink the search space to the rows preceding this row."
  },
  {
    "id": "maximal-square",
    "problemTitle": "Maximal Square",
    "problemDescription": "Given an m x n binary matrix filled with 0s and 1s, find the largest square containing only 1s and return its area.",
    "hint": "Dynamic Programming. Create a new 2D array of the same size. Each element of this array represents the bottom left corner of a square from the original matrix",
    "solution": "Create a new 2D array, called ‘dp’, of the same size as matrix.<br>        Initially, fill each element of dp with 0.<br>        Each element in dp is meant to represent the bottom-right corner of a square containing only ‘1’s.<br>        Now, iterate through each element of matrix (starting with [0, 0])<br>        For every 1’ we encounter in the matrix, we update the corresponding element in dp with (minimum of the values of its top, left and diagonal cells) + 1.<br>         This is because in our main matrix, we start from [0, 0]. So as we go bottom-right in the matrix, we keep looking top-left on the dp, to find fully filled squares.<br>        After the iteration is over, return the square of the largest value in dp (because each value in the dp, represents the length of a corresponding fully-filled square)."
  },
  {
    "id": "minimize-maximum-pair-sum-in-array",
    "problemTitle": "Minimize Maximum Pair Sum in Array",
    "problemDescription": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs. For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.<br><br>        Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:<br>   <ul> <li>Each element of nums is in exactly one pair, and<br></li>      <li>The maximum pair sum is minimized.</li>  </ul>        Return the minimized maximum pair sum after optimally pairing up the elements.",
    "hint": "Sort the array and then use two-pointer technique",
    "solution": "Sort the array.<br>        This will produce the smallest largest-pair.<br>        The correct way to build pairs is: (hi + lo), (hi--, lo--), etc.<br>        Ideally, the pair of the last and first element in a sorted array should be the smallest largest-pair.<br>        But, this may not be the case when the first element is negative. So, we keep iterating through the entire array using these two pointers.<br>        After the iteration, return the largest value of (hi + lo)"
  }
]